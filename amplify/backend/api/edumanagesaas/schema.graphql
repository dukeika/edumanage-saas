### amplify/backend/api/YourApiName/schema.graphql ###

# -------------------------------------------------------------------
# 1) A top-level “super-admins” group, who can CRUD *all* School records
#    (this is your “application admin”)
# -------------------------------------------------------------------
type School
  @model
  @auth(
    rules: [
      # ApplicationAdmins can do everything
      {
        allow: groups
        groups: ["ApplicationAdmins"]
        operations: [create, read, update, delete]
      }
      # The “owner” of this record (i.e. the school-admin you assign) can read/update
      { allow: owner, ownerField: "schoolAdmin", operations: [read, update] }
      # Any member of the per-school “admins” list (string list on the record)
      # can also read/update
      { allow: groups, groupsField: "admins", operations: [read, update] }
      # All signed-in users can read
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  name: String!
  address: String

  # new: subdomain for each school’s public landing page
  subdomain: String!

  # new: Cognito username (or sub) of the “school-admin” user
  schoolAdmin: String!

  # your existing “extra” per-school admin list
  admins: [String!]!

  # relationships
  academicYears: [AcademicYear] @hasMany(fields: ["id"])
  classes: [Class] @hasMany(fields: ["id"])
  students: [Student] @hasMany(fields: ["id"])
  users: [User] @hasMany(fields: ["id"])
  announcements: [Announcement] @hasMany(fields: ["id"])
}

type AcademicYear
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["ApplicationAdmins"]
        operations: [create, read, update, delete]
      }
      {
        allow: owner
        ownerField: "owner"
        operations: [create, read, update, delete]
      }
      { allow: groups, groupsField: "admins", operations: [read, update] }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  yearLabel: String!
  schoolID: ID!
  school: School @belongsTo(fields: ["schoolID"])
  terms: [Term] @hasMany(fields: ["id"])
}

type Term
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["ApplicationAdmins"]
        operations: [create, read, update, delete]
      }
      {
        allow: owner
        ownerField: "owner"
        operations: [create, read, update, delete]
      }
      { allow: groups, groupsField: "admins", operations: [read, update] }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  termLabel: String!
  startDate: AWSDate
  endDate: AWSDate
  academicYearID: ID!
  academicYear: AcademicYear @belongsTo(fields: ["academicYearID"])
  assessments: [Assessment] @hasMany(fields: ["id"])
}

type Class
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["ApplicationAdmins"]
        operations: [create, read, update, delete]
      }
      {
        allow: owner
        ownerField: "owner"
        operations: [create, read, update, delete]
      }
      { allow: groups, groupsField: "admins", operations: [read, update] }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  name: String!
  schoolID: ID!
  school: School @belongsTo(fields: ["schoolID"])
  teacherID: ID
  students: [Student] @hasMany(fields: ["id"])
  attendances: [Attendance] @hasMany(fields: ["id"])
  subjects: [Subject] @hasMany(fields: ["id"])
  assessments: [Assessment] @hasMany(fields: ["id"])
  grades: [Grade] @hasMany(fields: ["id"])
}

type Student
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["ApplicationAdmins"]
        operations: [create, read, update, delete]
      }
      {
        allow: owner
        ownerField: "owner"
        operations: [create, read, update, delete]
      }
      { allow: groups, groupsField: "admins", operations: [read, update] }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  name: String!
  classID: ID!
  schoolID: ID!
  class: Class @belongsTo(fields: ["classID"])
  school: School @belongsTo(fields: ["schoolID"])
  attendances: [Attendance] @hasMany(fields: ["id"])
  grades: [Grade] @hasMany(fields: ["id"])
}

type User
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["ApplicationAdmins"]
        operations: [create, read, update, delete]
      }
      { allow: owner, ownerField: "owner", operations: [read, update] }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  email: AWSEmail!
  name: String!
  role: String! # "ApplicationAdmin"|"SchoolAdmin"|"Teacher"|"Student"|"Parent"
  schoolID: ID!
  school: School @belongsTo(fields: ["schoolID"])
}

type Subject
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["ApplicationAdmins"]
        operations: [create, read, update, delete]
      }
      {
        allow: owner
        ownerField: "owner"
        operations: [create, read, update, delete]
      }
      { allow: groups, groupsField: "admins", operations: [read, update] }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  name: String!
  classID: ID!
  class: Class @belongsTo(fields: ["classID"])
  assessments: [Assessment] @hasMany(fields: ["id"])
}

type Assessment
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["ApplicationAdmins"]
        operations: [create, read, update, delete]
      }
      {
        allow: owner
        ownerField: "owner"
        operations: [create, read, update, delete]
      }
      { allow: groups, groupsField: "admins", operations: [read, update] }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  title: String!
  assessmentDate: AWSDate!
  classID: ID!
  class: Class @belongsTo(fields: ["classID"])
  subjectID: ID!
  subject: Subject @belongsTo(fields: ["subjectID"])
  termID: ID!
  term: Term @belongsTo(fields: ["termID"])
  grades: [Grade] @hasMany(fields: ["id"])
}

type Grade
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["ApplicationAdmins"]
        operations: [create, read, update, delete]
      }
      {
        allow: owner
        ownerField: "owner"
        operations: [create, read, update, delete]
      }
      { allow: groups, groupsField: "admins", operations: [read, update] }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  studentID: ID!
  student: Student @belongsTo(fields: ["studentID"])
  assessmentID: ID!
  assessment: Assessment @belongsTo(fields: ["assessmentID"])
  score: Float!
  classID: ID!
  class: Class @belongsTo(fields: ["classID"])
}

type Attendance
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["ApplicationAdmins"]
        operations: [create, read, update, delete]
      }
      {
        allow: owner
        ownerField: "owner"
        operations: [create, read, update, delete]
      }
      { allow: groups, groupsField: "admins", operations: [read, update] }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  studentID: ID!
  classID: ID!
  date: AWSDate!
  status: String!
  student: Student @belongsTo(fields: ["studentID"])
  class: Class @belongsTo(fields: ["classID"])
}

type Announcement
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["ApplicationAdmins"]
        operations: [create, read, update, delete]
      }
      {
        allow: owner
        ownerField: "createdBy"
        operations: [create, read, update, delete]
      }
      { allow: groups, groupsField: "admins", operations: [read, update] }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  title: String!
  message: String!
  audience: String
  targetID: ID
  createdBy: String!
  schoolID: ID!
  classID: ID
}
