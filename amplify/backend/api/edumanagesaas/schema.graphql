enum AudienceType {
  CLASS
  SCHOOL
}

type School
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["ApplicationAdmins"]
        operations: [create, read, update, delete]
      }
      {
        allow: groups
        groups: ["Admins"]
        operations: [create, read, update, delete]
      }
      {
        allow: groups
        groups: ["Teachers", "Parents", "Students"]
        operations: [read]
      }
    ]
  ) {
  id: ID! @primaryKey
  name: String!
  domain: String
}

type AcademicYear
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["ApplicationAdmins"]
        operations: [create, read, update, delete]
      }
      {
        allow: groups
        groups: ["Admins"]
        operations: [create, read, update, delete]
      }
      {
        allow: groups
        groups: ["Teachers", "Parents", "Students"]
        operations: [read]
      }
    ]
  ) {
  id: ID! @primaryKey
  name: String!
  startDate: AWSDateTime!
  endDate: AWSDateTime
  schoolID: ID! @index(name: "bySchool")
}

type Term
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["ApplicationAdmins"]
        operations: [create, read, update, delete]
      }
      {
        allow: groups
        groups: ["Admins"]
        operations: [create, read, update, delete]
      }
      {
        allow: groups
        groups: ["Teachers", "Parents", "Students"]
        operations: [read]
      }
    ]
  ) {
  id: ID! @primaryKey
  name: String!
  startDate: AWSDateTime!
  endDate: AWSDateTime
  schoolID: ID! @index(name: "bySchool")
  academicYearID: ID! @index(name: "byAcademicYear")
}

type Class
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["ApplicationAdmins"]
        operations: [create, read, update, delete]
      }
      {
        allow: groups
        groups: ["Admins"]
        operations: [create, read, update, delete]
      }
      {
        allow: groups
        groups: ["Teachers", "Parents", "Students"]
        operations: [read]
      }
    ]
  ) {
  id: ID! @primaryKey
  name: String!
  schoolID: ID! @index(name: "bySchool")
  termID: ID! @index(name: "byTerm")
}

type Student
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["ApplicationAdmins"]
        operations: [create, read, update, delete]
      }
      {
        allow: groups
        groups: ["Admins"]
        operations: [create, read, update, delete]
      }
      {
        allow: groups
        groups: ["Teachers", "Parents", "Students"]
        operations: [read]
      }
    ]
  ) {
  id: ID! @primaryKey
  firstName: String!
  lastName: String!
  email: String!
  schoolID: ID! @index(name: "bySchool")
}

type User
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["ApplicationAdmins"]
        operations: [create, read, update, delete]
      }
      {
        allow: groups
        groups: ["Admins"]
        operations: [create, read, update, delete]
      }
      {
        allow: groups
        groups: ["Teachers", "Parents", "Students"]
        operations: [read]
      }
    ]
  ) {
  id: ID! @primaryKey
  name: String!
  email: String!
  userRole: String!
  schoolID: ID! @index(name: "bySchool")
}

type Subject
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["ApplicationAdmins"]
        operations: [create, read, update, delete]
      }
      {
        allow: groups
        groups: ["Admins"]
        operations: [create, read, update, delete]
      }
      {
        allow: groups
        groups: ["Teachers", "Parents", "Students"]
        operations: [read]
      }
    ]
  ) {
  id: ID! @primaryKey
  name: String!
  schoolID: ID! @index(name: "bySchool")
  classID: ID! @index(name: "byClass")
}

type Assessment
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["ApplicationAdmins"]
        operations: [create, read, update, delete]
      }
      {
        allow: groups
        groups: ["Admins"]
        operations: [create, read, update, delete]
      }
      {
        allow: groups
        groups: ["Teachers", "Parents", "Students"]
        operations: [read]
      }
    ]
  ) {
  id: ID! @primaryKey
  title: String!
  assessmentDate: AWSDateTime!
  schoolID: ID! @index(name: "bySchool")
  subjectID: ID! @index(name: "bySubject")
  termID: ID!
  classID: ID!
  createdBy: ID!
}

type Grade
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["ApplicationAdmins"]
        operations: [create, read, update, delete]
      }
      {
        allow: groups
        groups: ["Admins"]
        operations: [create, read, update, delete]
      }
      {
        allow: groups
        groups: ["Teachers", "Parents", "Students"]
        operations: [read]
      }
    ]
  ) {
  id: ID! @primaryKey
  studentID: ID! @index(name: "byStudent")
  assessmentID: ID! @index(name: "byAssessment")
  score: Float!
  comments: String
  schoolID: ID! @index(name: "bySchool")
}

type Attendance
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["ApplicationAdmins"]
        operations: [create, read, update, delete]
      }
      {
        allow: groups
        groups: ["Admins"]
        operations: [create, read, update, delete]
      }
      {
        allow: groups
        groups: ["Teachers", "Parents", "Students"]
        operations: [read]
      }
    ]
  ) {
  id: ID! @primaryKey
  studentID: ID! @index(name: "byStudent")
  classID: ID! @index(name: "byClass")
  date: AWSDateTime!
  status: String!
  schoolID: ID! @index(name: "bySchool")
}

type Announcement
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["ApplicationAdmins"]
        operations: [create, read, update, delete]
      }
      {
        allow: groups
        groups: ["Admins"]
        operations: [create, read, update, delete]
      }
      { allow: groups, groups: ["Teachers"], operations: [create, read] }
      { allow: groups, groups: ["Parents", "Students"], operations: [read] }
    ]
  ) {
  id: ID! @primaryKey
  title: String!
  body: String!
  audience: AudienceType!
  createdBy: ID!
  createdAt: AWSDateTime!
  schoolID: ID! @index(name: "bySchool")
}
