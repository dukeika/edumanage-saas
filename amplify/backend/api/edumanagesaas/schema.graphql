# schema.graphql
# Phase 8: EduManage SaaS — Full RBAC‐hardened schema

# ─────────────────────────────────────────────────────────────────────────────
# SCHOOL
# Only the owner (creator) can mutate; Admins can read.
# ─────────────────────────────────────────────────────────────────────────────
type School
  @model
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "owner"
        operations: [create, read, update, delete]
      }
      { allow: groups, groups: ["Admins"], operations: [read] }
    ]
  ) {
  id: ID!
  name: String!
  address: String
  owner: String
  admins: [String]
  academicYears: [AcademicYear] @hasMany(fields: ["id"])
  classes: [Class] @hasMany(fields: ["id"])
  students: [Student] @hasMany(fields: ["id"])
  users: [User] @hasMany(fields: ["id"])
  announcements: [Announcement] @hasMany(fields: ["id"])
}

# ─────────────────────────────────────────────────────────────────────────────
# ACADEMIC YEAR
# Only Admins manage academic years.
# ─────────────────────────────────────────────────────────────────────────────
type AcademicYear
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Admins"]
        operations: [create, read, update, delete]
      }
    ]
  ) {
  id: ID!
  yearLabel: String!
  schoolID: ID!
  school: School @belongsTo(fields: ["schoolID"])
  terms: [Term] @hasMany(fields: ["id"])
}

# ─────────────────────────────────────────────────────────────────────────────
# TERM
# Only Admins manage terms.
# ─────────────────────────────────────────────────────────────────────────────
type Term
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Admins"]
        operations: [create, read, update, delete]
      }
    ]
  ) {
  id: ID!
  termLabel: String!
  startDate: AWSDate
  endDate: AWSDate
  academicYearID: ID!
  academicYear: AcademicYear @belongsTo(fields: ["academicYearID"])
  assessments: [Assessment] @hasMany(fields: ["id"])
}

# ─────────────────────────────────────────────────────────────────────────────
# CLASS
# Admins own classes; Teachers can read/update; all signed-in users can read.
# ─────────────────────────────────────────────────────────────────────────────
type Class
  @model
  @auth(
    rules: [
      # 1) Public via API Key — so our import scripts and console can run createSchool
      { allow: public, provider: apiKey, operations: [create, read] }
      # 2) Owner (the user who created it) can do everything
      {
        allow: owner
        ownerField: "owner"
        operations: [create, read, update, delete]
      }
      # 3) Cognito group "admins" can read & update
      { allow: groups, groupsField: "admins", operations: [read, update] }
      # 4) Any authenticated user can read
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  name: String!
  schoolID: ID!
  school: School @belongsTo(fields: ["schoolID"])
  teacherID: ID
  students: [Student] @hasMany(fields: ["id"])
  attendances: [Attendance] @hasMany(fields: ["id"])
  subjects: [Subject] @hasMany(fields: ["id"])
  assessments: [Assessment] @hasMany(fields: ["id"])
  grades: [Grade] @hasMany(fields: ["id"])
}

# ─────────────────────────────────────────────────────────────────────────────
# STUDENT
# Students see their own record; Admins, Teachers & Parents can read.
# ─────────────────────────────────────────────────────────────────────────────
type Student
  @model
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "id"
        identityClaim: "sub"
        operations: [read]
      }
      {
        allow: groups
        groups: ["Admins", "Teachers", "Parents"]
        operations: [read]
      }
    ]
  ) {
  id: ID!
  name: String!
  classID: ID!
  schoolID: ID!
  class: Class @belongsTo(fields: ["classID"])
  school: School @belongsTo(fields: ["schoolID"])
  attendances: [Attendance] @hasMany(fields: ["id"])
  grades: [Grade] @hasMany(fields: ["id"])
}

# ─────────────────────────────────────────────────────────────────────────────
# USER METADATA
# Users manage themselves; any signed-in user can read the list.
# ─────────────────────────────────────────────────────────────────────────────
type User
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "id", identityClaim: "sub" }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  email: AWSEmail!
  name: String!
  role: String!
  schoolID: ID!
  school: School @belongsTo(fields: ["schoolID"])
}

# ─────────────────────────────────────────────────────────────────────────────
# SUBJECT
# Admins & Teachers manage subjects; all signed-in users can read.
# ─────────────────────────────────────────────────────────────────────────────
type Subject
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Admins", "Teachers"]
        operations: [create, read, update, delete]
      }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  name: String!
  classID: ID!
  class: Class @belongsTo(fields: ["classID"])
  assessments: [Assessment] @hasMany(fields: ["id"])
}

# ─────────────────────────────────────────────────────────────────────────────
# ASSESSMENT
# Admins & Teachers manage assessments; all signed-in users can read.
# ─────────────────────────────────────────────────────────────────────────────
type Assessment
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Admins", "Teachers"]
        operations: [create, read, update, delete]
      }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  title: String!
  assessmentDate: AWSDate!
  classID: ID!
  class: Class @belongsTo(fields: ["classID"])
  subjectID: ID!
  subject: Subject @belongsTo(fields: ["subjectID"])
  termID: ID!
  term: Term @belongsTo(fields: ["termID"])
  grades: [Grade] @hasMany(fields: ["id"])
}

# ─────────────────────────────────────────────────────────────────────────────
# GRADE
# Students read only their own grades; Admins & Teachers CRUD all.
# ─────────────────────────────────────────────────────────────────────────────
type Grade
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "studentID", operations: [read] }
      {
        allow: groups
        groups: ["Admins", "Teachers"]
        operations: [create, read, update, delete]
      }
    ]
  ) {
  id: ID!
  studentID: ID!
  student: Student @belongsTo(fields: ["studentID"])
  assessmentID: ID!
  assessment: Assessment @belongsTo(fields: ["assessmentID"])
  score: Float!
  classID: ID!
  class: Class @belongsTo(fields: ["classID"])
}

# ─────────────────────────────────────────────────────────────────────────────
# ATTENDANCE
# Students read their own; Admins & Teachers CRUD all.
# ─────────────────────────────────────────────────────────────────────────────
type Attendance
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "studentID", operations: [read] }
      {
        allow: groups
        groups: ["Admins", "Teachers"]
        operations: [create, read, update, delete]
      }
    ]
  ) {
  id: ID!
  studentID: ID!
  classID: ID!
  date: AWSDate!
  status: String!
  student: Student @belongsTo(fields: ["studentID"])
  class: Class @belongsTo(fields: ["classID"])
}

# ─────────────────────────────────────────────────────────────────────────────
# ANNOUNCEMENT
# Admins & Teachers post; everyone signed-in can read.
# ─────────────────────────────────────────────────────────────────────────────
type Announcement
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Admins", "Teachers"]
        operations: [create, read, update, delete]
      }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  title: String!
  message: String!
  audience: String
  targetID: ID
  createdBy: ID!
  schoolID: ID!
  school: School @belongsTo(fields: ["schoolID"])
  classID: ID
  createdAt: AWSDateTime!
}

# ─────────────────────────────────────────────────────────────────────────────
# CUSTOM USER CREATION MUTATION
# ─────────────────────────────────────────────────────────────────────────────
input CreateCognitoUserInput {
  email: AWSEmail!
  name: String!
  role: String!
  schoolID: ID!
  userPoolId: String!
}

type Mutation {
  createCognitoUser(input: CreateCognitoUserInput!): User
    @function(name: "adminCreateUser-${env}")
}
